[project]
name = "biocommons.anyvar"
authors = [
  { name="biocommons contributors", email="biocommons-dev@googlegroups.com" },
]
description = "AnyVar provides Python and REST interfaces to validate, normalize, generate identifiers, and register biological sequence variation according to the GA4GH Variation Representation standards."
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.95.0",
    "python-multipart",  # required for fastapi file uploads
    "uvicorn",
    "ga4gh.vrs[extras]~=2.1.2",
    "sqlalchemy~=1.4.54",
    "pyyaml",
    "cool-seq-tool", #TODO: Remove?
    "seqrepo", #TODO: Remove?
    "agct",
    "refget"
]
dynamic = ["version"]

[project.optional-dependencies]
postgres = ["psycopg[binary]"]
snowflake = ["snowflake-sqlalchemy~=1.5.1"]
queueing = [
    "celery[redis]~=5.4.0",
    "aiofiles",
]
duckdb = [
    "duckdb",       # duckdb python client
    "duckdb-engine" # sqlalchemy engine for duckdb
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "celery[pytest]",
]
dev = [
    "ruff==0.11.2",
    "pre-commit>=3.7.1",
    "ipykernel",
]

[project.urls]
Homepage = "https://github.com/biocommons/anyvar"
Documentation = "https://github.com/biocommons/anyvar/"
Changelog = "https://github.com/biocommons/anyvar/releases"
Source = "https://github.com/biocommons/anyvar/"
"Bug Tracker" = "https://github.com/biocommons/anyvar/issues"


[build-system]
requires = [
    "setuptools >= 65.3",
    "setuptools_scm >= 8"
]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"anyvar.storage" = ["*.sql"]

[tool.setuptools_scm]

[tool.pytest.ini_options]
addopts = "--cov=anyvar --cov-report term-missing"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["biocommons.example"]
omit = ["*_test.py", "*/test/*", "*/tests/*"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[tool.ruff]
src = ["src"]
include = ["src/**/*.py", "tests/**/*.py", "demo/**/*.py"]

[tool.ruff.lint]
select = [
    "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "I",  # https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF",  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "PERF",  # https://docs.astral.sh/ruff/rules/#perflint-perf
    "FURB",  # https://docs.astral.sh/ruff/rules/#refurb-furb
    "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
fixable = [
    "I",
    "F401",
    "D",
    "UP",
    "ANN",
    "B",
    "C4",
    "LOG",
    "G",
    "PIE",
    "PT",
    "RSE",
    "SIM",
    "PERF",
    "FURB",
    "RUF",
    "W",
]
# ANN003 - missing-type-kwargs
# D203 - one-blank-line-before-class
# D205 - blank-line-after-summary
# D206 - indent-with-spaces*
# D213 - multi-line-summary-second-line
# D300 - triple-single-quotes*
# D400 - ends-in-period
# D415 - ends-in-punctuation
# E111 - indentation-with-invalid-multiple*
# E114 - indentation-with-invalid-multiple-comment*
# E117 - over-indented*
# E501 - line-too-long*
# EM101, EM102, EM103 - assign exception string to variable
# W191 - tab-indentation*
# S321 - suspicious-ftp-lib-usage
# *ignored for compatibility with formatter
ignore = [
    "ANN003",
    "D203", "D205", "D206", "D213", "D300", "D400", "D415",
    "E111", "E114", "E117", "E501",
    "EM101", "EM102", "EM103",
    "W191",
    "S321",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN002 - missing-type-args
# ANN2 - missing-return-type
# ANN102 - missing-type-cls
# B008 - function-call-in-default-argument
# D - Pydocstyle
# E402 - module-import-not-at-top-of-file
# F401 - unused-import
# S101 - assert
# S608 - hardcoded-sql-expression
# B011 - assert-false
# INP001 - implicit-namespace-package
# C400 - unnecessary-generator-list
# ARG002 - unused-method-argument
# A002 - builtin-argument-shadowing
# T201 - print
"__init__.py" = ["F401", "E402"]
"src/anyvar/restapi/main.py" = ["B008"]
"tests/*" = ["ANN001", "ANN002", "ANN2", "ANN102", "S101", "B011", "INP001", "D", "C400"]
"tests/storage/test_snowflake.py" = ["S608"]
"tests/storage/test_postgres.py" = ["S608"]
"tests/storage/test_duckdb.py" = ["S608"]
"tests/storage/sqlalchemy_mocks.py" = ["ARG002", "A002"]
"demo/*" = ["T201"]

[tool.ruff.format]
docstring-code-format = true
