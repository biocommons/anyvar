[project]
name = "biocommons.anyvar"
authors = [
  { name="biocommons contributors", email="biocommons-dev@googlegroups.com" },
]
description = "AnyVar provides Python and REST interfaces to validate, normalize, generate identifiers, and register biological sequence variation according to the GA4GH Variation Representation standards."
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "fastapi>=0.95.0",
    "python-multipart",  # required for fastapi file uploads
    "uvicorn",
    "ga4gh.vrs[extras]~=2.1.2",
    "sqlalchemy~=2.0.0",
    "pyyaml",
    "agct",
    "pysam",
    "python-dotenv",
    "anyio",
    "bioutils"
]
dynamic = ["version"]

[project.optional-dependencies]
postgres = ["psycopg[binary]"]
queueing = [
    "celery[redis]~=5.4.0",
    "aiofiles",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "celery[pytest]",
    "jsonschema",
    "pyyaml",
]
dev = [
    "ruff==0.12.8",
    "pre-commit>=4.2.0",
    "ipykernel",
]
docs = [
    "sphinx==8.2.3",
    "sphinx_rtd_theme==3.0.2",
    "sphinx-autodoc-typehints==3.2.0",
    "sphinx-autobuild==2024.10.3",
    "sphinx-copybutton==0.5.2",
    "sphinxext-opengraph==0.10.0",
    "sphinx-github-changelog==1.7.1",
]

[project.urls]
Homepage = "https://github.com/biocommons/anyvar"
Documentation = "https://github.com/biocommons/anyvar/"
Changelog = "https://github.com/biocommons/anyvar/releases"
Source = "https://github.com/biocommons/anyvar/"
"Bug Tracker" = "https://github.com/biocommons/anyvar/issues"


[build-system]
requires = [
    "setuptools >= 65.3",
    "setuptools_scm >= 8"
]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"anyvar.storage" = ["*.sql"]

[tool.setuptools_scm]

[tool.pytest.ini_options]
addopts = "--cov=anyvar --cov-report term-missing"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["biocommons.example"]
omit = ["*_test.py", "*/test/*", "*/tests/*"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[tool.ruff]
src = ["src"]
include = ["src/**/*.py", "tests/**/*.py", "demo/**/*.py"]
exclude = ["docs/source/"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # not used
    "AIR",
    "ERA",
    "FAST",
    "YTT",
    "FBT",
    "CPY",
    "DJ",
    "EM",
    "EXE",
    "FIX",
    "FA",
    "INT",
    "PYI",
    "TID",
    "TD",
    "TC",
    "C90",
    "NPY",
    "PD",
    # ignore for compatibility with formatter
    "D206",
    "D300",
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "W191",
    "S321",
    "COM812",
    # don't require types on *args, **kwargs
    "ANN002",
    "ANN003",
    # subjective pylint thresholds
    "PLR0904",
    "PLR091",
    "PLR1702",
    # excessive docstring requirements
    "D105",
    "D205",
    "D203",
    "D213",  # conflicts with D212
    "D400",
    "D401",
    "D403",
    "D415",
    # excessive exception message requirements
    "TRY003",
    # excessive type ignore requirements
    "PGH003",
    # misc unnecessary readability requirements
    "RET504",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"src/anyvar/restapi/main.py" = ["B008"]
"src/anyvar/queueing/celery_worker.py" = ["PLW0602", "PLW0603"]
"src/anyvar/storage/no_db.py" = ["ARG002"]
"tests/*" = ["ANN001", "ANN2", "ANN102", "S101", "B011", "INP001", "D", "C400", "PLR2004"]
"tests/storage/*" = ["S608"]
"tests/storage/sqlalchemy_mocks.py" = ["ARG002", "A002", "TRY002"]
"demo/*" = ["T201"]

[tool.ruff.format]
docstring-code-format = true
