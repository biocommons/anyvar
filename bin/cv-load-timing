#!/usr/bin/env python3

import logging
import os
import sys

import coloredlogs
import redis
import tqdm
from biocommons.seqrepo import SeqRepo
from bioutils.exceptions import BioutilsError
from ga4gh.vrs import models
from ga4gh.vrs.dataproxy import SeqRepoDataProxy
from hgvs.exceptions import HGVSParseError

from anyvar import AnyVar
from anyvar.extras.clinvarparser import ClinvarParser
from anyvar.storage.redisobjectstore import RedisObjectStore
from anyvar.translator import Translator

_logger = logging.getLogger(__name__)


def firstn(gen, n=None):
    if n is None:
        yield from gen
    else:
        for i, e in enumerate(gen):
            yield e
            if i == n:
                break



if __name__ == "__main__":

    coloredlogs.install(level="INFO")

    seqrepo_dir = os.environ.get("SEQREPO_DIR", "/usr/local/share/seqrepo/latest")
    data_proxy = SeqRepoDataProxy(SeqRepo(root_dir=seqrepo_dir))
    ros = RedisObjectStore(redis=redis.Redis(db=15), models=models)
    av = AnyVar(object_store=ros, data_proxy=data_proxy)
    tlr = Translator(
        data_proxy = data_proxy,
        normalize=True,
        identify=True
    )


    cv_fn = sys.argv[1]
    cvrec_gen = (cvrec for cvrec in ClinvarParser(cv_fn) if cvrec.hgvs_expressions)
    pbar = tqdm.tqdm(cvrec_gen, unit="VCVs")
    n_hgvs = 0
    n_cvrec = 0
    n_exc = 0
    for cvrec in pbar:
        #_logger.info(
        #     f"{cvrec.accession}; {cvrec.record_type}; {len(cvrec.hgvs_expressions)} "
        #     "hgvs expressions"
        # )
        n_cvrec += 1
        n_hgvs += len(cvrec.hgvs_expressions)
        if n_cvrec % 10 == 0:
            pbar.set_description(f"{n_hgvs} hgvs expressions")
        for he in cvrec.hgvs_expressions:
            try:
                v = tlr.from_hgvs(he)
            except (
                ValueError, HGVSParseError, AttributeError, KeyError, BioutilsError
            ):
                v = models.Text(definition=he)
            _id = av.put_object(v)
            _logger.info(f"stored {_id} for {he}")

    _logger.info(f"{n_hgvs} hgvs expressions in {n_cvrec} clinvar records")
